<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jason&#39;s Google Code-in Blog</title>
    <link>http://codethejason.github.io/blog/</link>
    <description>Recent content on Jason&#39;s Google Code-in Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 19 Dec 2015 23:19:50 -0500</lastBuildDate>
    <atom:link href="http://codethejason.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Developing a Register and Login System with Codeigniter</title>
      <link>http://codethejason.github.io/blog/codeignitor/</link>
      <pubDate>Sat, 19 Dec 2015 23:19:50 -0500</pubDate>
      
      <guid>http://codethejason.github.io/blog/codeignitor/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://www.codeigniter.com/&#34;&gt;Codeigniter&lt;/a&gt; is a MVC PHP application framework designed to make developing a web application easier and faster. It has a large and active &lt;a href=&#34;http://forum.codeigniter.com/&#34;&gt;community base&lt;/a&gt; with a pretty good amount of &lt;a href=&#34;http://www.codeigniter.com/user_guide/&#34;&gt;documentation&lt;/a&gt;. For me, this was my first PHP framework I used. I have always thought using frameworks like Codeigniter or Laravel is bad, but I may have to change my mindset after actually using one. The time it took me from start to end in developing this application is shorter than the time it would take to develop a &amp;lsquo;vanilla&amp;rsquo; PHP application even though this is my first time using Codeigniter. You may see my final app on my &lt;a href=&#34;http://192.111.152.115:17210&#34;&gt;temporary site&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;making-the-login-register-application:fc652abd1263e2709a3eda71713fadcd&#34;&gt;Making the Login/Register Application&lt;/h3&gt;

&lt;p&gt;I will go over the general gist of what I did. You can see the full code on my &lt;a href=&#34;https://github.com/codethejason/usersystem&#34;&gt;repository&lt;/a&gt;. I basically made a simple login and register system with validation. Once a user registers, he or she can login. After logging in, the user may see an array of all the registered users. He or she then may log out and can login after that. It&amp;rsquo;s a very basic application, but what is important for this task is understanding the basics of Codeigniter.&lt;/p&gt;

&lt;h4 id=&#34;first-the-basic-configuration:fc652abd1263e2709a3eda71713fadcd&#34;&gt;First the Basic Configuration&lt;/h4&gt;

&lt;p&gt;After downloading Codeigniter 3.0 from &lt;a href=&#34;https://www.codeigniter.com/download&#34;&gt;here&lt;/a&gt;, I set up the directory and apache2.conf on my server (I am  using LAMPP). I pasted this code into the &lt;Directory /var/&gt; in apache to configure mod_rewrite settings for manipulating the URL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#Source: https://gist.github.com/philipptempel/4226750
&amp;lt;IfModule mod_rewrite.c&amp;gt;
  RewriteEngine On
  # !IMPORTANT! Set your RewriteBase here and don&#39;t forget trailing and leading
  #  slashes.
  # If your page resides at
  #  http://www.example.com/mypage/test1
  # then use
  # RewriteBase /mypage/test1/
  RewriteBase /
  RewriteCond %{REQUEST_FILENAME} !-f
  RewriteCond %{REQUEST_FILENAME} !-d
  RewriteRule ^(.*)$ index.php?/$1 [L]
&amp;lt;/IfModule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I went into the &lt;em&gt;applications/config&lt;/em&gt; folder to modify the database, autoload, and config files according to my needs. I then created a new controller in &lt;em&gt;controllers/&lt;/em&gt; named main and set it as default in &lt;em&gt;config/routes.php&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;making-the-login-and-register-portion:fc652abd1263e2709a3eda71713fadcd&#34;&gt;Making the Login and Register Portion&lt;/h4&gt;

&lt;p&gt;I then proceeded to create the login method in my &lt;em&gt;Main.php&lt;/em&gt; and made a login_validation method that took advantage of the form_validation library to check that all the requirements are met (i.e. all fields required, user filled out email, etc. ). I created a view for the login form.&lt;/p&gt;

&lt;p&gt;Then, I created the register portion, which was basically the exact same as the login except for a confirm password field, a db insert method, and additional validation.&lt;/p&gt;

&lt;h4 id=&#34;finishing-the-application:fc652abd1263e2709a3eda71713fadcd&#34;&gt;Finishing the Application&lt;/h4&gt;

&lt;p&gt;Finally, I was almost done with the application after about five consecutive hours (the Model_users model was a headache to deal with). I made some final changes including printing out the results array from the db-&amp;gt;get() query.&lt;/p&gt;

&lt;p&gt;It was an interesting experience using a PHP framework for the same time. Sure it took some time to learn, but I think it was well worth as it eased my animosity towards frameworks. Everything just felt so simple &amp;ndash; no creating a validation class, no creating a configuration manager, fewer worries about security, and more. I will most definitely consider using some sort of PHP framework for my next application.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setup Hugo on Github Pages</title>
      <link>http://codethejason.github.io/blog/setupghpages/</link>
      <pubDate>Thu, 17 Dec 2015 23:12:09 -0500</pubDate>
      
      <guid>http://codethejason.github.io/blog/setupghpages/</guid>
      <description>

&lt;p&gt;At this point, you might be wondering how users can easily see your blog content without downloading the repository and doing all the steps you had to take to view your posts. This is done by publishing on &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt;, a free service offered by Github that hosts static webpages. We can create a static website by publishing all our posts. I will be using lots of content from the &lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog/&#34;&gt;Hugo site&lt;/a&gt;, so this tutorial is very similar.&lt;/p&gt;

&lt;h5 id=&#34;step-1-modify-config-toml-file:4f462177fbb182d324a56341526983da&#34;&gt;Step 1: Modify config.toml file&lt;/h5&gt;

&lt;p&gt;We must first append some lines to the configuration file to tell Hugo that we want to publish the site. Append the following lines to your existing file from the last tutorial:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;contentdir = &amp;quot;content/post&amp;quot;
layoutdir = &amp;quot;layouts&amp;quot;
publishdir = &amp;quot;public&amp;quot;
canonifyurls = true
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;step-2-setup-git-to-work:4f462177fbb182d324a56341526983da&#34;&gt;Step 2: Setup Git to Work&lt;/h5&gt;

&lt;p&gt;I borrowed this part from the official Hugo site. It is extremely comprehensive and not much more can be added. Make sure to perform these commands in order in &lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;Git Bash&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Create a new orphand branch (no commit history) named gh-pages
git checkout --orphan gh-pages

# Unstage all files
git rm --cached $(git ls-files)

# Grab one file from the master branch so we can make a commit
git checkout master README.md

# Add and commit that file
git add .
git commit -m &amp;quot;INIT: initial commit on gh-pages branch&amp;quot;

# Push to remote gh-pages branch
git push origin gh-pages

# Return to master branch
git checkout master

# Remove the public folder to make room for the gh-pages subtree
rm -rf public

# Add the gh-pages branch of the repository. It will look like a folder named public
git subtree add --prefix=public https://github.com/[github username]/blog.git gh-pages --squash

# Pull down the file we just committed. This helps avoid merge conflicts
git subtree pull --prefix=public https://github.com/[github username]/blog.git gh-pages

# Run hugo. Generated site will be placed in public directory
hugo


# Add everything
git add -A

# Commit and push to master
git commit -m &amp;quot;Updating site&amp;quot; &amp;amp;&amp;amp; git push origin master

# Push the public subtree to the gh-pages branch
git subtree push --prefix=public https://github.com/[github username]/blog.git gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be sure to be signed in to avoid any authentication problems.&lt;/p&gt;

&lt;h5 id=&#34;step-3-create-deploy-sh-file:4f462177fbb182d324a56341526983da&#34;&gt;Step 3: Create deploy.sh file&lt;/h5&gt;

&lt;p&gt;This deploy.sh file will make deploying blog posts a lot easier in the future. Since Windows does not support shell scripts, we must run the script in Git Bash. The usage of this script is &lt;code&gt;bash deploy.sh &amp;quot;&amp;lt;my commit msg&amp;gt;&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;

# Build the project.
hugo

# Add changes to git.
git add -A

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin master
git subtree push --prefix=public https://github.com/[github username]/blog.git gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it! Enjoy your new blog that&amp;rsquo;s secure and easy to use.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setup a Blog using Hugo on Windows</title>
      <link>http://codethejason.github.io/blog/welcome/</link>
      <pubDate>Wed, 16 Dec 2015 22:26:09 -0500</pubDate>
      
      <guid>http://codethejason.github.io/blog/welcome/</guid>
      <description>

&lt;p&gt;Today, I created a blog with the Hugo static website generator, an engine very similar to Jekyll. Hugo allows a user to easily setup a secure and customizable blog in a short period of time. It is open source and constantly updated to ensure the latest features and bug fixes.&lt;/p&gt;

&lt;p&gt;Setting up Hugo is a piece of cake, even on Windows. First, I recommend watch the &lt;a href=&#34;http://gohugo.io/overview/quickstart/&#34;&gt;quickstart guide&lt;/a&gt;. It is extremely informative and got me setup in less than ten minutes.&lt;/p&gt;

&lt;h5 id=&#34;step-1-install-hugo:2cc7dc244eed4480e8b46c91e911e96b&#34;&gt;Step 1: Install Hugo&lt;/h5&gt;

&lt;p&gt;To install Hugo and access it from the command prompt, first scroll down to the bottom of the &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;releases&lt;/a&gt; and download the appropriate executable. After unzipping the file, rename the file name to &lt;strong&gt;hugo.exe&lt;/strong&gt;. Navigate to your &lt;em&gt;AppData\Roaming&lt;/em&gt; (access it by typing in &lt;em&gt;%appdata%&lt;/em&gt; in the &lt;em&gt;Windows + R&lt;/em&gt; dialog) in Windows Explorer and create a new folder called &lt;strong&gt;hugo&lt;/strong&gt;, and copy the binary inside the folder. In the run dialog, type in &lt;code&gt;rundll32 sysdm.cpl,EditEnvironmentVariables&lt;/code&gt; to access the system variables. Under the user variables, edit the variable that says &lt;em&gt;PATH&lt;/em&gt; by appending a semicolon and the location of the hugo folder in appdata. After saving, you are now ready to run hugo on the command line.&lt;/p&gt;

&lt;h5 id=&#34;step-2-configure-hugo:2cc7dc244eed4480e8b46c91e911e96b&#34;&gt;Step 2: Configure Hugo&lt;/h5&gt;

&lt;p&gt;Create a folder in a location of your choice. Type in the following commands in order:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd C:\&amp;lt;Your file location&amp;gt;
mkdir hugo
cd hugo
hugo new site
hugo new firstpost.md
git clone --depth 1 --recursive https://github.com/pdevty/material-design themes/material-design
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to install other themes, feel free to &lt;a href=&#34;https://github.com/spf13/hugoThemes&#34;&gt;check them out&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Edit the &lt;em&gt;config.toml&lt;/em&gt; file to say this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseURL =&amp;quot;Your URL&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;Your Name&#39;s Blog&amp;quot;
theme = &amp;quot;material-design&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;step-3-run-hugo:2cc7dc244eed4480e8b46c91e911e96b&#34;&gt;Step 3: Run Hugo&lt;/h6&gt;

&lt;p&gt;Now, you can add any content below the plus signs to your new markdown file located at &lt;em&gt;content/posts/firstpost.md&lt;/em&gt; in your favorite text editor. The formatting is markdown, which you can read about on &lt;a href=&#34;https://help.github.com/articles/markdown-basics/&#34;&gt;Github&lt;/a&gt;. Remove the &lt;code&gt;draft = true&lt;/code&gt; statement on top of the page and run &lt;code&gt;hugo server&lt;/code&gt; to generate your content. Your content will be available on &lt;strong&gt;localhost:1313&lt;/strong&gt; in your browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://puu.sh/lYxNn/a7dbbbe8c3.jpg&#34; width=&#34;300&#34; alt=&#34;Final Result&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>