<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Smalltalk on Jason&#39;s Google Code-in Blog</title>
    <link>http://codethejason.github.io/blog/categories/smalltalk/</link>
    <description>Recent content in Smalltalk on Jason&#39;s Google Code-in Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Jan 2016 19:06:06 -0500</lastBuildDate>
    <atom:link href="http://codethejason.github.io/blog/categories/smalltalk/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Creating a Web App with Zinc</title>
      <link>http://codethejason.github.io/blog/zinc/</link>
      <pubDate>Thu, 21 Jan 2016 19:06:06 -0500</pubDate>
      
      <guid>http://codethejason.github.io/blog/zinc/</guid>
      <description>

&lt;p&gt;Working with Zinc on Pharo Smalltalk to create a small web application was extremely different than creating a Web App with PHP, NodeJS, or even Python. Zinc is a framework in smalltalk that deals with the HTTP networking protocol using the reference platform of Pharo. I have followed &lt;a href=&#34;http://zn.stfx.eu/zn/build-and-deploy-1st-webapp/&#34;&gt;this&lt;/a&gt; tutorial to develop a web app which allows the user to change the picture.  I have to say that the process was a lot more complicated than I thought.&lt;/p&gt;

&lt;h5 id=&#34;serving-a-page:2f23471afcd50320a0078eaf11931ef0&#34;&gt;Serving a Page&lt;/h5&gt;

&lt;p&gt;All the instructions are in the tutorial, so I will be summarizing what I did. I first worked on serving up the HTML page which took a lot more steps than I thought. Normally, I can just create an HTML file on my system and open it in a web browser. I need to handle the request of the user from Zinc to be able to serve it. Then, I added the functionality for Pharo to download the image and serve it to the user on the &lt;em&gt;/image&lt;/em&gt; directory of the website. I then added the ability to upload images from the user and ensured the data was a valid image by performing a few checks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://puu.sh/mETNa/638ea56322.jpg&#34; alt=&#34;scrn&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;adding-tests:2f23471afcd50320a0078eaf11931ef0&#34;&gt;Adding Tests&lt;/h5&gt;

&lt;p&gt;I added some tests to ensure that the web application was running as expected. Each tests references the &lt;code&gt;withServerDo&lt;/code&gt; method which controls the server to make sure it starts and stops properly. The first test checks to make sure there is HTML on the &lt;em&gt;/image&lt;/em&gt; path. The second test ensures that the default raw image was being outputted correctly by asserting the equality of the served image and the image in the app object. The third test makes sure that the uploaded image changed to what was expected by using a sample image.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://puu.sh/mETKh/fc23c96713.jpg&#34; alt=&#34;scrn&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;final-thoughts:2f23471afcd50320a0078eaf11931ef0&#34;&gt;Final Thoughts&lt;/h5&gt;

&lt;p&gt;The process of serving a simple web application was quite complex. Although the application flow makes sense, I probably would not use Zinc to serve up web applications in production. The code has a few methods I don&amp;rsquo;t understand the point of. For example, &lt;code&gt;#value&lt;/code&gt; does not seem to need to exist when &lt;code&gt;#handleRequest:&lt;/code&gt; could be called. Keeping in mind that Pharo was designed for learning and understanding code deeply and intuitively, I think it certainly did its job in that area :).&lt;/p&gt;

&lt;h5 id=&#34;run-my-code:2f23471afcd50320a0078eaf11931ef0&#34;&gt;Run My Code&lt;/h5&gt;

&lt;p&gt;Just want to see the final result? Get the &lt;code&gt;MyFirstWebApp&lt;/code&gt; package from &lt;a href=&#34;http://www.smalltalkhub.com/#!/~codethejason/WebApp/&#34;&gt;here&lt;/a&gt;.&lt;br /&gt;
To start the server, run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ZnServer startDefaultOn: 8080.
ZnServer default delegate map: #image to: MyFirstWebApp new.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To stop the server, run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ZnServer stopDefault.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Further Extend a User Management Application in Pharo</title>
      <link>http://codethejason.github.io/blog/pharousermanagementpt2/</link>
      <pubDate>Fri, 15 Jan 2016 01:03:00 -0500</pubDate>
      
      <guid>http://codethejason.github.io/blog/pharousermanagementpt2/</guid>
      <description>&lt;p&gt;My task was to add a few more fields to the existing ConstantManager package and implement some type of checking mechanism to ensure the password fields match. I accomplished this by adding the instance variables and adding a few methods.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://puu.sh/mwja3/6cb60041a4.png&#34; alt=&#34;screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I added a small check using if statements to check that the two passwords match. If the passwords do not match, an alert generated by &lt;code&gt;UIManager&lt;/code&gt; pops up to warn the user.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://puu.sh/mwjxG/55f91bae81.png&#34; alt=&#34;screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can see my current code &lt;a href=&#34;http://www.smalltalkhub.com/#!/~codethejason/usermanagementapp/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After this task, I would like to modify the code so an additional confirmPassword entry does not have to be created in the Contact database. Also, I would like to implement eMBee&amp;rsquo;s suggestions of hiding the password (best solution found so far is &lt;em&gt;PasswordDialogBox&lt;/em&gt;, but I would prefer it to be in the same form as the other fields) and making the role field into a list of strings instead of one long string with different roles. I am excited to continue working with Pharo smalltalk and will be taking on some more challenges!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Extend a User Management Application in Pharo</title>
      <link>http://codethejason.github.io/blog/pharousermanagement/</link>
      <pubDate>Tue, 29 Dec 2015 10:02:57 -0500</pubDate>
      
      <guid>http://codethejason.github.io/blog/pharousermanagement/</guid>
      <description>&lt;p&gt;My task was to extend an address book located on this blog: &lt;a href=&#34;http://magaloma.blogspot.de/2011/01/pharo-gui-with-polymorph.html&#34;&gt;http://magaloma.blogspot.de/2011/01/pharo-gui-with-polymorph.html&lt;/a&gt;. It featured adding, editing, and deleting a contact and only had two fields: first name and last name. I extended the applicatino by adding an email field after loading the program in Pharo 4.0.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Gofer it
 squeaksource: &#39;Pharocasts&#39;;
 package: &#39;ContactManager&#39;;
 load.
 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, in the contact class, I added an instance variable called email. After that, I could add methods in the &lt;em&gt;accessing&lt;/em&gt; protocol that returns the email and also add the email to be printed in the printOn method in the &lt;em&gt;printing&lt;/em&gt; protocol. Last, I amended &lt;code&gt;ContactListEditor&amp;gt;&amp;gt;#contacts&lt;/code&gt; to include actually printing out the email address.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://puu.sh/mcywp/bea6834b21.png&#34; alt=&#34;email&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Smalltalk is a reflective language and was designed for constructionist learning, a method designed to reconstruct a learner&amp;rsquo;s knowledge rather to transmit new knowledge. In my short experience using Pharo Smalltalk, I found it quite different primarily due to the enivironment it is being run in but also due to the syntax. I never coded in any language that needed to be run in its own image and found it to be quite odd. Pharo smalltalk&amp;rsquo;s syntax also seems very different from the syntax I am used to seeing. I hope to continue doing smalltalk tasks for Google Code-in and explore smalltalk further even after GCI.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>