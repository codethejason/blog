<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jason&#39;s Google Code-in Blog</title>
    <link>http://codethejason.github.io/blog/</link>
    <description>Recent content on Jason&#39;s Google Code-in Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 Jan 2016 23:05:17 -0500</lastBuildDate>
    <atom:link href="http://codethejason.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>REST API with Teapot</title>
      <link>http://codethejason.github.io/blog/teapot/</link>
      <pubDate>Sun, 24 Jan 2016 23:05:17 -0500</pubDate>
      
      <guid>http://codethejason.github.io/blog/teapot/</guid>
      <description>&lt;p&gt;Today, my task was to write a REST API in Pharo using the Teapot framework. Teapot is a packaged designed to make making REST APIs with Pharo A LOT easier than writing a REST API from scratch in Zinc. For example, to output &lt;em&gt;Hello World&lt;/em&gt; when a user navigates to &lt;code&gt;/hello&lt;/code&gt;, this is all the code that is needed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Teapot on
    GET: &#39;/welcome&#39; -&amp;gt; &#39;Hello World!&#39;;
    start.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I wrote a package named &lt;code&gt;UserAPI&lt;/code&gt; on &lt;a href=&#34;http://www.smalltalkhub.com/#!/~codethejason/UserAPI/&#34;&gt;SmallTalkHub&lt;/a&gt; that relies on the &lt;code&gt;ContactManager&lt;/code&gt; package &lt;a href=&#34;http://www.smalltalkhub.com/#!/~codethejason/usermanagementapp/&#34;&gt;here&lt;/a&gt; to retrieve a list of users and display it as JSON in the browser after a user navigates to &lt;code&gt;/users&lt;/code&gt;. I took some inspiration from &lt;a href=&#34;https://skrishnamachari.wordpress.com/2014/08/28/teapot-pharo-web-rest-framework-it-aint-micro/&#34;&gt;this blog&lt;/a&gt;. To set it up, load the packages into your Pharo image. After that, run this command in Playground to start up the app:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;teapot := Teapot configure: {
#defaultOutput -&amp;gt; #json. 
#port -&amp;gt; 8080. 
#debugMode -&amp;gt; true 
}.
teapotInstance := TeapotRequestHandler new.
teapotInstance runApp: teapot.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For production, you can set the debugMode to false. To stop the server, stop all instances of Teapot:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Teapot stopAll.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it! In my very simple app, I really only have two methods: &lt;code&gt;#handleGetRequest:&lt;/code&gt; and &lt;code&gt;#runApp:&lt;/code&gt;. The &lt;code&gt;runApp&lt;/code&gt; method starts Teapot and defines the path Teapot should &amp;ldquo;activate&amp;rdquo; in its API. The &lt;code&gt;handleGetRequest&lt;/code&gt; method handles the request when the &lt;code&gt;/users&lt;/code&gt; page is hit. It calls the Contact class which returns an ordered collection. The app uses NeoJSON to parse the ordered collection to JSON suitable for a RESTful API.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My Google Code-in Experience with FOSSASIA</title>
      <link>http://codethejason.github.io/blog/gciexperience/</link>
      <pubDate>Fri, 22 Jan 2016 16:43:05 -0500</pubDate>
      
      <guid>http://codethejason.github.io/blog/gciexperience/</guid>
      <description>

&lt;p&gt;As we all know, Google Code-in 2015 is sadly coming to a close on January 25, 2016. In this blog post, I will describe my wonderful experience working with the awesome FOSSASIA community while learning tons of new stuff. I would like to thank the admins &lt;strong&gt;&lt;a href=&#34;https://twitter.com/mariobehling&#34;&gt;Mario Behling&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/hpdang&#34;&gt;Hong Phuc Dang&lt;/a&gt;, and &lt;a href=&#34;https://twitter.com/mohitkanwal&#34;&gt;Mohit Kanwal&lt;/a&gt;&lt;/strong&gt; for making this FOSSASIA&amp;rsquo;s participation in GCI possible. I would also like to thank all the mentors for guidance and support.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../gci/fossasia.png&#34; alt=&#34;fossasia&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;coming-into-gci:b044e5a8ff8584fdadee498d91837873&#34;&gt;Coming into GCI&lt;/h5&gt;

&lt;p&gt;I entered the contest right from the beginning: December 7, 2015. FOSSASIA instantly jumped out at m while browsing the list of organizations. I liked the mission of spreading free and open source software to form a better future with Open Technologies and ICT and promoting growth in science in youth. I decided to dedicate my time with FOSSASIA for the entire length of Google Code-in. I was so excited to learn new technologies and put my programming skills that I have learned before into use.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../gci/computer.jpg&#34; alt=&#34;computers&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;projects:b044e5a8ff8584fdadee498d91837873&#34;&gt;Projects&lt;/h5&gt;

&lt;p&gt;My &lt;a href=&#34;https://github.com/codethejason/gci2015&#34;&gt;projects&lt;/a&gt; varied widely ranging from hangman in JavaScript to a user management system in PHP Codeignitor.  I tried to claim a variety of tasks but ended up mainly focusing on Javascript tasks. I had a chance to learn NodeJS and apply it to a GitHub OAuth application. My favorite application was my &lt;a href=&#34;http://codethejason.github.io/checkers/&#34;&gt;checkers&lt;/a&gt; app. It is completely based on objects including the board, pieces, and tiles. This object oriented design I learned by reading &lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS&#34;&gt;&lt;em&gt;You Don&amp;rsquo;t Know JS&lt;/em&gt;&lt;/a&gt; makes it easy to understand the code and improve it. A few other people used this through GNU Licensing to accomplish their tasks (i.e. &lt;a href=&#34;https://github.com/yasoob/checkers&#34;&gt;yasoob&lt;/a&gt;, &lt;a href=&#34;https://github.com/shiftsayan/checkers&#34;&gt;shiftsayan&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The Pharo tasks created by &lt;strong&gt;&lt;a href=&#34;https://github.com/eMBee&#34;&gt;eMBee (Martin)&lt;/a&gt;&lt;/strong&gt; were especially interesting because I learned a computer language I had never seen or heard of before in my life. The language was completely different than what I was used to seeing (for example, operators in Pharo are actually binary messages); it is probably one of the most difficult languages I have learned (also difficult to find quick answers because of the small community). It took some time for me to get used to it, but I ended up making a light-sout game, a user management application, a web application (which was very  different from a web application I would build on PHP, NodeJS, or Python), and a REST API. You can see my packages &lt;a href=&#34;http://www.smalltalkhub.com/#!/~codethejason&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../gci/repos.png&#34; alt=&#34;prwatch&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;contributions:b044e5a8ff8584fdadee498d91837873&#34;&gt;Contributions&lt;/h5&gt;

&lt;p&gt;I made many contributions during the course of GCI to Loklak-Webtweets, WhatcanIdoforFOSSASIA, and more. I built a GitHub PR Autoresponder bot to comment the preview link each time someone opened a pull request on the FOSSASIA GCI student site. I will keep improving it in the future, and one of the improvements will be porting it to NodeJS. A sample post made by &lt;code&gt;prwatch&lt;/code&gt; is shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../gci/prwatch.png&#34; alt=&#34;prwatch&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I did not know anything about the GitHub API or webhooks before this task; I did not know GitHub offered so many management tools to take control of the project. I have learned GitHub at my school before, but I usually commit to my own repository so there were no merge conflicts or other issues to deal with. This experience gave me the taste of what open source collaboration is like with Git (and also the annoyances of merge conflicts). I got a chance to put the objectives I learned in school into use in real world applications and to extend my knowledge of Git further.&lt;/p&gt;

&lt;p&gt;I also contributed to the &lt;a href=&#34;github.com/fossasia/gci15.fossasia.org&#34;&gt;GCI Student Site&lt;/a&gt; by replacing the twitter widget with a loklak implementation, improving the blog section dramatically, adding the loklak peers and footer section, and doing a lot of other contributions to improve the overall user experience. Special thanks to &lt;strong&gt;&lt;a href=&#34;https://github.com/mariobehling&#34;&gt;Mario Behling&lt;/a&gt;, &lt;a href=&#34;https://github.com/jig08&#34;&gt;Jigyasa Grover&lt;/a&gt;, &lt;a href=&#34;https://github.com/roonyh&#34;&gt;Aruna Herath&lt;/a&gt;, &lt;a href=&#34;https://github.com/sudheesh001&#34;&gt;Sudheesh Singanamalla&lt;/a&gt;, &lt;a href=&#34;https://github.com/mananwason&#34;&gt;Manan Wason&lt;/a&gt;&lt;/strong&gt;, and &lt;a href=&#34;https://github.com/nikunjness&#34;&gt;Nikunj Thakkar&lt;/a&gt; for working with me on the GCI site and other side projects. I implemented Loklak&amp;rsquo;s search API on the 2015 and 2016 FOSSASIA event sites as well as on &lt;a href=&#34;http://fossasia.org&#34;&gt;fossasia.org&lt;/a&gt;. I helped others with issues on GitHub and also invited a few of my friends to join GCI with FOSSASIA (i.e. aristochaotic, scorpianz1525). I was also involved with contributing to loklak_webclient, showing tutorials on how to setup Loklak, and implementing it on all of the FOSSASIA event sites and the FOSSASIA GCI student site with the mentors listed above and &lt;strong&gt;&lt;a href=&#34;https://github.com/orbiter&#34;&gt;Orbiter&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../gci/pr.jpg&#34; alt=&#34;prwatch&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;gci-improvements-for-next-year:b044e5a8ff8584fdadee498d91837873&#34;&gt;GCI Improvements for Next Year&lt;/h5&gt;

&lt;p&gt;FOSSASIA did an awesome job as an organization for GCI. All the mentors were helpful and guided me towards my goals. In the beginning, it took a while for me to be added to the FOSSASIA GCI Students group, but the application that &lt;strong&gt;&lt;a href=&#34;https://github.com/roonyh&#34;&gt;roonyh (Aruna Herath)&lt;/a&gt;&lt;/strong&gt; built will allow all mentors to add students to the group (&lt;a href=&#34;https://github.com/roonyh/fossasia-gci-companion&#34;&gt;FOSSASIA GCI Companion&lt;/a&gt;), speeding up the process next year. I also thought the task instances could be better managed as in some cases the task was still open while it was already accomplished. More specialized varied &amp;lsquo;learning&amp;rsquo;  tasks could be added (i.e. learning electron with NodeJS), but the variety of tasks this year was pretty decent.&lt;/p&gt;

&lt;h5 id=&#34;future-for-myself:b044e5a8ff8584fdadee498d91837873&#34;&gt;Future for Myself&lt;/h5&gt;

&lt;p&gt;I learned more from this contest than I have in any classroom environment. I learned new programming practices, used services to make development more efficient, fiddled with new languages, and had a chance to utilize the concepts I learned previously. The most important thing I learned about by far is open source. Open source allows everyone to benefit from the freely available source code. It also allows the software to be more secure, flexible, and &amp;ldquo;featureful&amp;rdquo;, increasing the quality of the software. Let us take a look at my commit history:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../gci/contributions.png&#34; alt=&#34;contributions&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I had never been engaged in any open source project before, but after GCI I will now continue to stick with FOSSASIA and explore other projects that interest me. Knowing I can gain experience and help the world at the same time is a wonderful feeling. Anyways, I hope fellow students also enjoyed their time at GCI and will continue to contribute to open source! Good luck to all!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../gci/jasonw.jpg&#34; alt=&#34;profilepic&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating a Web App with Zinc</title>
      <link>http://codethejason.github.io/blog/zinc/</link>
      <pubDate>Thu, 21 Jan 2016 19:06:06 -0500</pubDate>
      
      <guid>http://codethejason.github.io/blog/zinc/</guid>
      <description>

&lt;p&gt;Working with Zinc on Pharo Smalltalk to create a small web application was extremely different than creating a Web App with PHP, NodeJS, or even Python. Zinc is a framework in smalltalk that deals with the HTTP networking protocol using the reference platform of Pharo. I have followed &lt;a href=&#34;http://zn.stfx.eu/zn/build-and-deploy-1st-webapp/&#34;&gt;this&lt;/a&gt; tutorial to develop a web app which allows the user to change the picture.  I have to say that the process was a lot more complicated than I thought.&lt;/p&gt;

&lt;h5 id=&#34;serving-a-page:2f23471afcd50320a0078eaf11931ef0&#34;&gt;Serving a Page&lt;/h5&gt;

&lt;p&gt;All the instructions are in the tutorial, so I will be summarizing what I did. I first worked on serving up the HTML page which took a lot more steps than I thought. Normally, I can just create an HTML file on my system and open it in a web browser. I need to handle the request of the user from Zinc to be able to serve it. Then, I added the functionality for Pharo to download the image and serve it to the user on the &lt;em&gt;/image&lt;/em&gt; directory of the website. I then added the ability to upload images from the user and ensured the data was a valid image by performing a few checks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://puu.sh/mETNa/638ea56322.jpg&#34; alt=&#34;scrn&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;adding-tests:2f23471afcd50320a0078eaf11931ef0&#34;&gt;Adding Tests&lt;/h5&gt;

&lt;p&gt;I added some tests to ensure that the web application was running as expected. Each tests references the &lt;code&gt;withServerDo&lt;/code&gt; method which controls the server to make sure it starts and stops properly. The first test checks to make sure there is HTML on the &lt;em&gt;/image&lt;/em&gt; path. The second test ensures that the default raw image was being outputted correctly by asserting the equality of the served image and the image in the app object. The third test makes sure that the uploaded image changed to what was expected by using a sample image.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://puu.sh/mETKh/fc23c96713.jpg&#34; alt=&#34;scrn&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;final-thoughts:2f23471afcd50320a0078eaf11931ef0&#34;&gt;Final Thoughts&lt;/h5&gt;

&lt;p&gt;The process of serving a simple web application was quite complex. Although the application flow makes sense, I probably would not use Zinc to serve up web applications in production. The code has a few methods I don&amp;rsquo;t understand the point of. For example, &lt;code&gt;#value&lt;/code&gt; does not seem to need to exist when &lt;code&gt;#handleRequest:&lt;/code&gt; could be called. Keeping in mind that Pharo was designed for learning and understanding code deeply and intuitively, I think it certainly did its job in that area :).&lt;/p&gt;

&lt;h5 id=&#34;run-my-code:2f23471afcd50320a0078eaf11931ef0&#34;&gt;Run My Code&lt;/h5&gt;

&lt;p&gt;Just want to see the final result? Get the &lt;code&gt;MyFirstWebApp&lt;/code&gt; package from &lt;a href=&#34;http://www.smalltalkhub.com/#!/~codethejason/WebApp/&#34;&gt;here&lt;/a&gt;.&lt;br /&gt;
To start the server, run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ZnServer startDefaultOn: 8080.
ZnServer default delegate map: #image to: MyFirstWebApp new.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open the server at &lt;a href=&#34;http://localhost:8080/image&#34;&gt;http://localhost:8080/image&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To stop the server, run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ZnServer stopDefault.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Deploy EngelSystem on Your Server</title>
      <link>http://codethejason.github.io/blog/engelsystem/</link>
      <pubDate>Sat, 16 Jan 2016 17:22:21 -0500</pubDate>
      
      <guid>http://codethejason.github.io/blog/engelsystem/</guid>
      <description>

&lt;p&gt;Today, I decided to set up &lt;a href=&#34;https://github.com/engelsystem/engelsystem&#34;&gt;Engelsystem&lt;/a&gt; on a clean server as a task for Google Code-in. My first impression when looking at the PHP application was that it is a well-built MVC app. It seems to have everything an event manager could want. When I looked at the README, all the instructions were in German, but I decided to follow the gist of it anyways. I will be telling you how to setup the application step by step in English on Ubuntu 14.04 LTS x64.&lt;/p&gt;

&lt;h4 id=&#34;instructions-for-setup:b7304ab3082bb231740622fec109fd30&#34;&gt;Instructions for Setup&lt;/h4&gt;

&lt;h5 id=&#34;step-1-setup-lamp-and-install-git:b7304ab3082bb231740622fec109fd30&#34;&gt;Step 1: Setup LAMP and install GIT&lt;/h5&gt;

&lt;p&gt;The first you want to do is to setup LAMP stack (linux, apache, mysql, and php). From &lt;a href=&#34;http://digitalocean.com&#34;&gt;DigitalOcean&lt;/a&gt;, you may just select the LAMP One-click install app. Otherwise, please follow the tutorial &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-14-04&#34;&gt;here&lt;/a&gt; on how to set up lamp on Ubuntu 14.04 LTS x64. If you are running this app on a different operating system, a quick Google search will provide you with installation steps.&lt;/p&gt;

&lt;p&gt;Afterwards, you may install git by these commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get update
apt-get install git -y
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;step-2-clone-the-repository-and-setup-database:b7304ab3082bb231740622fec109fd30&#34;&gt;Step 2: Clone the Repository and Setup Database&lt;/h5&gt;

&lt;p&gt;First, clone the repository (the recursive parameter allows us to clone the submodules):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone --recursive https://github.com/engelsystem/engelsystem.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the absolute path of the engelsystem directory. For example, mine is &lt;code&gt;/root&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, configure your MySQL engelsystem database:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql -u root -p
[Enter your password]
CREATE DATABASE engelsystem;
use engelsystem;
source [path to engelsystem]/engelsystem/db/install.sql;
source [path to engelsystem]/engelsystem/db/update.sql;
exit;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go to &lt;code&gt;engelsystem/config&lt;/code&gt; and copy the default config into &lt;code&gt;config.php&lt;/code&gt;. Modify the new file to match your MySQL credentials.&lt;/p&gt;

&lt;h5 id=&#34;step-3-test-that-app-is-working:b7304ab3082bb231740622fec109fd30&#34;&gt;Step 3: Test That App is Working&lt;/h5&gt;

&lt;p&gt;Move the app to your &lt;code&gt;/var/www/html/&lt;/code&gt; directory by typing &lt;code&gt;mv ./engelsystem /var/www/html&lt;/code&gt; (alternatively create a symlink to your current directory). Go to your browser and type in &lt;code&gt;[serverhost]/engelsystem/public&lt;/code&gt; to see the application in action.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../engelsystem/firsttimerun.jpg&#34; alt=&#34;screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To login, type use the following credentials:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Username: admin
Password: asdfasdf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be sure to change your password for security reasons.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../engelsystem/loggedin.png&#34; alt=&#34;screenshot&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;step-4-modify-apache-to-use-server-for-production:b7304ab3082bb231740622fec109fd30&#34;&gt;Step 4: Modify Apache to Use Server for Production&lt;/h5&gt;

&lt;p&gt;We must make sure to point our apache2 document root to the Engelsystem directory to prevent any user from accessing anything other than the &lt;code&gt;public/&lt;/code&gt; directory for security reasons. Do this by modifying the apache2 configuration file (assuming you are running this on a server hosting no other sites):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install nano -y
nano /etc/apache2/sites-available/000-default.conf

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change &lt;code&gt;DocumentRoot /var/www/html&lt;/code&gt; into &lt;code&gt;DocumentRoot /var/www/html/engelsystem/public&lt;/code&gt;. Restart apache by typing &lt;code&gt;service apache2 restart&lt;/code&gt;. See the result of your page by going to your host in your browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../engelsystem/changehost.png&#34; alt=&#34;screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you made it this far, congratulations! You have successfully set up Engelsystem and can use it to manage your event.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Further Extend a User Management Application in Pharo</title>
      <link>http://codethejason.github.io/blog/pharousermanagementpt2/</link>
      <pubDate>Fri, 15 Jan 2016 01:03:00 -0500</pubDate>
      
      <guid>http://codethejason.github.io/blog/pharousermanagementpt2/</guid>
      <description>&lt;p&gt;My task was to add a few more fields to the existing ConstantManager package and implement some type of checking mechanism to ensure the password fields match. I accomplished this by adding the instance variables and adding a few methods.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://puu.sh/mwja3/6cb60041a4.png&#34; alt=&#34;screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I added a small check using if statements to check that the two passwords match. If the passwords do not match, an alert generated by &lt;code&gt;UIManager&lt;/code&gt; pops up to warn the user.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://puu.sh/mwjxG/55f91bae81.png&#34; alt=&#34;screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can see my current code &lt;a href=&#34;http://www.smalltalkhub.com/#!/~codethejason/usermanagementapp/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After this task, I would like to modify the code so an additional confirmPassword entry does not have to be created in the Contact database. Also, I would like to implement eMBee&amp;rsquo;s suggestions of hiding the password (best solution found so far is &lt;em&gt;PasswordDialogBox&lt;/em&gt;, but I would prefer it to be in the same form as the other fields) and making the role field into a list of strings instead of one long string with different roles. I am excited to continue working with Pharo smalltalk and will be taking on some more challenges!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using NodeJS for the First Time</title>
      <link>http://codethejason.github.io/blog/nodejs/</link>
      <pubDate>Tue, 12 Jan 2016 16:43:16 -0500</pubDate>
      
      <guid>http://codethejason.github.io/blog/nodejs/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://nodejs.org&#34;&gt;NodeJS&lt;/a&gt; is an asyncronous event driven Javascript framework. The main feature that separates NodeJS from other systems is is its non reliance on threads and blocking code. NodeJS does not require that a certain process finishes before starting another one. This allows the application to move on instead of being stuck on long processes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://docs.oracle.com/cd/A87860_01/doc/appdev.817/a76975/oci02ba5.gif&#34; alt=&#34;non blocking&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;my-opinions-on-nodejs:4d1400037a492e28b65e1117ff3d5186&#34;&gt;My Opinions on NodeJS&lt;/h5&gt;

&lt;p&gt;NodeJS was a load of fun to work with, and I really did enjoy using it. Since it is based on Javascript, the learning curve for me wasn&amp;rsquo;t that bad and I picked it up fast. It felt very familiar even though I haven&amp;rsquo;t worked with the framework. Setup on both Windows and Linux were easy for the most part, but on Ubuntu 14.04 x64 LTS, I was confused why my Node app was not running for a while before discovering that Ubuntu&amp;rsquo;s package manager had another package called &lt;em&gt;node&lt;/em&gt; unrelated to the package &lt;em&gt;nodejs&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;I will be honest: I did not enjoy the non-blocking feeature of NodeJS at first because it requires me to do a copious amount of callbacks. I will be trying out something different next time so I do not get code that is described on &lt;a href=&#34;callbackhell.com&#34;&gt;this page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Although I was very familiar with Javascript, I still felt weird using it on the server side. I am used to the idea that Javscript is a client side language designed to provide and modify visual elements. Right now I still feel a lot more comfortable with PHP for server side code, but I will try using NodeJS on my next back end application.&lt;/p&gt;

&lt;h5 id=&#34;some-code-i-wrote:4d1400037a492e28b65e1117ff3d5186&#34;&gt;Some Code I Wrote&lt;/h5&gt;

&lt;p&gt;I wrote a simple &lt;a href=&#34;https://gist.github.com/codethejason/c2b2d71814752eb10d4d&#34;&gt;script&lt;/a&gt; to check for membership of a user in FOSSASIA&amp;rsquo;s GCI Students organization on Github. This was the first NodeJS code I ever wrote, and roonyh (Aruna Herath) encouraged me to try out other tasks. I then created a &lt;a href=&#34;https://github.com/codethejason/GithubOAuth&#34;&gt;GitHub OAuth Application&lt;/a&gt; which logs in the user using a GitHub OAuth token. I used &lt;em&gt;httpdispatcher&lt;/em&gt; to route my application and &lt;em&gt;requests&lt;/em&gt; to get data from GitHub&amp;rsquo;s API. I spent a lot of time on the second application, but it was all worth it considering I now have a lot more knowledge about NodeJS than I had when I started out :). I will definitely be using NodeJS in the future.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/07/1436439824nodejs-logo.png&#34; alt=&#34;NODEJS&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exploring Docker</title>
      <link>http://codethejason.github.io/blog/docker/</link>
      <pubDate>Fri, 01 Jan 2016 17:16:25 -0500</pubDate>
      
      <guid>http://codethejason.github.io/blog/docker/</guid>
      <description>&lt;p&gt;I have always seen Docker being talked about in the Linux community and have seen it as one of the DigitalOcean quick app install options. I had no idea what it was and did not realize it&amp;rsquo;s function. &lt;a href=&#34;https://www.docker.com/what-docker&#34;&gt;Docker&lt;/a&gt; is actually a container technology designed to improve efficiency. Traditional virtual machines house their own guest operating system and libraries to run an application. As one can see, if there is a large number of virtual machines running their own operating system, the workflow is inefficient. Docker combines the operating systems and other shared parts, so a low spec server could be running hundreds of containers without a hitch. Docker also makes collaboration and publishing easier since it creates a common framework for people to work together and scales easily.&lt;/p&gt;

&lt;p&gt;Docker has a few tools in its Toolbox to help with development. &lt;a href=&#34;https://www.docker.com/docker-compose&#34;&gt;Docker Compose&lt;/a&gt; is a tool used for running small parts of application on different containers while treating it as a single application. There is no need to manage each and every separate container. &lt;a href=&#34;https://docs.docker.com/machine/&#34;&gt;Docker Machine&lt;/a&gt; makes host creation easier by automatically configuring Docker on the hosts. &lt;a href=&#34;https://www.docker.com/docker-swarm&#34;&gt;Docker Swarm&lt;/a&gt; is exactly what it sounds like; it provides clustering capabilities to manage a whole swarm of Docker Engines in a since Docker Engine.&lt;/p&gt;

&lt;p&gt;I found &lt;a href=&#34;https://docs.docker.com/engine/installation/&#34;&gt;installation&lt;/a&gt; to be a little bit frustrating because I could not get Docker to work on one of my Windows computers. When I tried to ask for help, there was virtually nobody active on the IRC. I proceeded to install Docker on another computer without a problem. I made a 3rd tier application (talks to database) that connects to MySQL &lt;a href=&#34;https://github.com/codethejason/gcismallprojects2015/tree/master/simpleDockerApp&#34;&gt;here&lt;/a&gt; and ran it on a Docker container.&lt;/p&gt;

&lt;p&gt;By the way, Happy New Year!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://4.bp.blogspot.com/-dZ7-CqEkHhU/VJ6dGmIHCHI/AAAAAAAAH28/eYAWdPY_XM0/w350/Happy-New-Year.png&#34; alt=&#34;hny&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Extend a User Management Application in Pharo</title>
      <link>http://codethejason.github.io/blog/pharousermanagement/</link>
      <pubDate>Tue, 29 Dec 2015 10:02:57 -0500</pubDate>
      
      <guid>http://codethejason.github.io/blog/pharousermanagement/</guid>
      <description>&lt;p&gt;My task was to extend an address book located on this blog: &lt;a href=&#34;http://magaloma.blogspot.de/2011/01/pharo-gui-with-polymorph.html&#34;&gt;http://magaloma.blogspot.de/2011/01/pharo-gui-with-polymorph.html&lt;/a&gt;. It featured adding, editing, and deleting a contact and only had two fields: first name and last name. I extended the applicatino by adding an email field after loading the program in Pharo 4.0.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Gofer it
 squeaksource: &#39;Pharocasts&#39;;
 package: &#39;ContactManager&#39;;
 load.
 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, in the contact class, I added an instance variable called email. After that, I could add methods in the &lt;em&gt;accessing&lt;/em&gt; protocol that returns the email and also add the email to be printed in the printOn method in the &lt;em&gt;printing&lt;/em&gt; protocol. Last, I amended &lt;code&gt;ContactListEditor&amp;gt;&amp;gt;#contacts&lt;/code&gt; to include actually printing out the email address.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://puu.sh/mcywp/bea6834b21.png&#34; alt=&#34;email&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Smalltalk is a reflective language and was designed for constructionist learning, a method designed to reconstruct a learner&amp;rsquo;s knowledge rather to transmit new knowledge. In my short experience using Pharo Smalltalk, I found it quite different primarily due to the enivironment it is being run in but also due to the syntax. I never coded in any language that needed to be run in its own image and found it to be quite odd. Pharo smalltalk&amp;rsquo;s syntax also seems very different from the syntax I am used to seeing. I hope to continue doing smalltalk tasks for Google Code-in and explore smalltalk further even after GCI.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setup Angular User App with Github Pages</title>
      <link>http://codethejason.github.io/blog/setupangularapp/</link>
      <pubDate>Mon, 28 Dec 2015 12:38:47 -0500</pubDate>
      
      <guid>http://codethejason.github.io/blog/setupangularapp/</guid>
      <description>&lt;p&gt;Today, our task is to setup &lt;a href=&#34;https://github.com/aidarbek/angular&#34;&gt;https://github.com/aidarbek/angular&lt;/a&gt; so that it runs with Github Pages. Luckily, AngularJS is easy to setup for Github Pages, so this task only takes a few steps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, fork the repository and save it to your account.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next&lt;/strong&gt;, clone the fork you just created by typing this command in Git Shell:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/&amp;lt;your github username&amp;gt;/angular.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Then&lt;/strong&gt;, make a branch called github pages and switch to it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd angular/
git branch gh-pages
git checkout gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Last but not least&lt;/strong&gt;, push the new branch to Github by setting a new upstream.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push --set-upstream origin gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;re done! You can see your result at &lt;code&gt;http://&amp;lt;your github username&amp;gt;.github.io/angular&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://puu.sh/mbviC/6ef77603cf.png&#34; alt=&#34;result&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting Up a Webhook for Github</title>
      <link>http://codethejason.github.io/blog/webhook/</link>
      <pubDate>Fri, 25 Dec 2015 00:25:35 -0500</pubDate>
      
      <guid>http://codethejason.github.io/blog/webhook/</guid>
      <description>

&lt;p&gt;You can set up a webhook for so that each time a contributor opens or reopens a pull request on your repository/fork, a bot may comment a live version of the contributor&amp;rsquo;s site on the pull request.&lt;/p&gt;

&lt;h5 id=&#34;add-webhook:95424174b467660d9d29374c13638004&#34;&gt;Add webhook&lt;/h5&gt;

&lt;p&gt;First, you must add a webhook to your repository. To do this:&lt;/p&gt;

&lt;p&gt;1) Go to your repository settings and select &lt;em&gt;Webhooks &amp;amp; Services&lt;/em&gt;.&lt;br /&gt;
2) Click &lt;em&gt;add webhook&lt;/em&gt;. You can make up a random payload URL for now. Your secret key can be anything (be sure to record this).&lt;br /&gt;
3) Click &lt;em&gt;let me select individual events&lt;/em&gt; and only check the &lt;em&gt;pull request&lt;/em&gt; checkbox.&lt;br /&gt;
4) Create the webhook.&lt;/p&gt;

&lt;p&gt;You should see something like this afterwards (with a random link):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://puu.sh/m7QnB/804187cbaf.png&#34; alt=&#34;example&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;setting-up-your-bot:95424174b467660d9d29374c13638004&#34;&gt;Setting up your bot&lt;/h5&gt;

&lt;p&gt;You must first create a new github account to host the bot (or you can use your own account if you want it to act as the bot).  Go to your &lt;a href=&#34;https://github.com/settings/tokens&#34;&gt;settings&lt;/a&gt; to create a new personal access token. Leave it on the default permissions.&lt;/p&gt;

&lt;p&gt;1) Clone &lt;a href=&#34;https://github.com/codethejason/fossasiaprbot&#34;&gt;https://github.com/codethejason/fossasiaprbot&lt;/a&gt; to a public area on your server. Something like &lt;code&gt;http://example.com/fossasiaprbot/webhook.php&lt;/code&gt; will be your webhook URL, so please edit that in the repository settings.&lt;br /&gt;
2) On your server, install php and php5-curl.&lt;br /&gt;
3) Create a &lt;code&gt;secret.json&lt;/code&gt; in the cloned directory file like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;githubkey&amp;quot;: &amp;quot;your secret key you recorded in part 1&amp;quot;,
  &amp;quot;token&amp;quot;: &amp;quot;your secret access token&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;testing-the-webhook:95424174b467660d9d29374c13638004&#34;&gt;Testing the webhook&lt;/h5&gt;

&lt;p&gt;You can now test your webhook by creating a pull request on your fork.&lt;/p&gt;

&lt;p&gt;Sign into another account and make a file change in the &lt;em&gt;gh-pages&lt;/em&gt; branch and make a pull request. Test that the bot now posts the link to the live website.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setup FOSSASIA&#39;s Orga Server</title>
      <link>http://codethejason.github.io/blog/setuporgaserver/</link>
      <pubDate>Wed, 23 Dec 2015 19:18:08 -0500</pubDate>
      
      <guid>http://codethejason.github.io/blog/setuporgaserver/</guid>
      <description>

&lt;p&gt;Today, I will be teaching you how to locally setup the &lt;a href=&#34;https://github.com/fossasia/open-event-orga-server&#34;&gt;open event orga server&lt;/a&gt; which manages all the data of an event. I will let you know the exact process I went through.&lt;/p&gt;

&lt;h5 id=&#34;step-1-fork-and-clone-the-repository:05b9736d8424bfbd20ee3035f5b847da&#34;&gt;Step 1: Fork and clone the repository&lt;/h5&gt;

&lt;p&gt;Make sure you clone the repository from &lt;a href=&#34;https://github.com/fossasia/open-event-orga-server&#34;&gt;Github&lt;/a&gt; into your default folder. You should also fork the repository if you are thinking of contributing to it. Cloning the repository first is much easier since there is a preset &lt;em&gt;Vagrantfile&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../setuporgaimages/clonerepo.png&#34; alt=&#34;clone repository&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;step-2-install-vagrant-and-virtualbox:05b9736d8424bfbd20ee3035f5b847da&#34;&gt;Step 2: Install Vagrant and VirtualBox&lt;/h5&gt;

&lt;p&gt;At this point, go to &lt;a href=&#34;http://vagrantup.com&#34;&gt;Vagrant&lt;/a&gt; and install the latest version. Afterwards, navigate to &lt;a href=&#34;https://www.virtualbox.org/wiki/Downloads&#34;&gt;VirtualBox&lt;/a&gt; to install VirtualBox 5 for Windows. Restart your computer after the installation.&lt;/p&gt;

&lt;h5 id=&#34;step-3-set-up-box-and-connect-to-it:05b9736d8424bfbd20ee3035f5b847da&#34;&gt;Step 3: Set up Box and connect to it&lt;/h5&gt;

&lt;p&gt;Go to your command prompt and type in &lt;code&gt;vagrant up&lt;/code&gt; in the open event orga directory to initialize the setup process. The default operating system is Ubuntu Trusty LTS (you can use another OS if you would like). Nevertheless, you should see this after running the &lt;code&gt;vagrant up&lt;/code&gt; command:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../setuporgaimages/vagrantup.png&#34; alt=&#34;clone repository&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After waiting three to ten minutes, your virtual machine will be ready. Go into an ssh client (for example &lt;a href=&#34;http://www.putty.org/&#34;&gt;PuTTy&lt;/a&gt;) and login to the server using the following credentials:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;host: localhost or 127.0.0.1
port: 2222
username: vagrant
password: vagrant
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Navigate to &lt;em&gt;/vagrant&lt;/em&gt; by typing in &lt;code&gt;cd /vagrant&lt;/code&gt;. You should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../setuporgaimages/consolewindow.png&#34; alt=&#34;window&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;step-4-install-open-orga-server:05b9736d8424bfbd20ee3035f5b847da&#34;&gt;Step 4: Install Open Orga Server&lt;/h5&gt;

&lt;p&gt;To avoid confusion, exit out of any command prompts. At any point, if you want to shut down the VM, type &lt;code&gt;vagrant halt&lt;/code&gt; in the open orga server directory.&lt;br /&gt;
Now, create the python database given in the &lt;em&gt;create_db.py&lt;/em&gt; file and start the Nginx server by running these commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python create_db.py
python manage.py runserver -h 0.0.0.0 -p 5000
#Address is 0.0.0.0 so the app binds to the public ips on the box (for accessing it on our machine)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You are done! View the web application at &lt;a href=&#34;localhost:8001&#34;&gt;localhost:8001&lt;/a&gt; on your desktop. If you would like to keep the app running, you can install screen and use it to keep it in the background even while you are not on the VM.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../setuporgaimages/finished.png&#34; alt=&#34;window&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;troubleshooting:05b9736d8424bfbd20ee3035f5b847da&#34;&gt;Troubleshooting&lt;/h3&gt;

&lt;p&gt;One issue I had was that I was stuck on this screen for a while:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../setuporgaimages/stuck.png&#34; alt=&#34;stuck&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To fix it, you must restart your computer and boot into BIOS (usually by function keys or a special power button on the computer). Afterwards, select virtualization and enable it.&lt;/p&gt;

&lt;p&gt;Other than that, I did not have any issues deploying the application. Be sure to have the latest versions of Vagrant and Virtualbox and you will be able to finish installing the server successfully. Good luck on your installation and have a blast contributing!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bug Fixes for GCI Student Site</title>
      <link>http://codethejason.github.io/blog/sitebugfixes/</link>
      <pubDate>Sun, 20 Dec 2015 17:17:02 -0500</pubDate>
      
      <guid>http://codethejason.github.io/blog/sitebugfixes/</guid>
      <description>&lt;p&gt;Yesterday, I made two pull requests for &lt;a href=&#34;https://codein.withgoogle.com/organizations/fossasia/&#34;&gt;FOSSASIA&lt;/a&gt;. My &lt;a href=&#34;https://github.com/fossasia/gci15.fossasia.org/pull/83&#34;&gt;first pull request&lt;/a&gt; fixed the issue of the icons being scattered all over the place. The icons were originally off centered from the avatar circle and off center from each other. I created a flexbox grid that automtically centered the social media icons to the center of the avatar circle. Then, I set a definte size for the a element and centered each icon vertically and horizontally inside the corresponding link elements.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://puu.sh/m2Ri8/804ddfb4e3.jpg&#34; alt=&#34;icons&#34; /&gt;&lt;/p&gt;

&lt;p&gt;My &lt;a href=&#34;https://github.com/fossasia/gci15.fossasia.org/pull/97&#34;&gt;second pull request&lt;/a&gt; aligned the Google Plus iframe so that it would stay in the center instead of being pushed to the left. It was a simple &lt;code&gt;text-align: center;&lt;/code&gt; fix.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://puu.sh/m2R03/efa23baa1a.jpg&#34; alt=&#34;google plus&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I also added my own profile picture and information in &lt;a href=&#34;https://github.com/fossasia/gci15.fossasia.org/pull/125&#34;&gt;pull request #125&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Developing a Register and Login System with Codeigniter</title>
      <link>http://codethejason.github.io/blog/codeignitor/</link>
      <pubDate>Sat, 19 Dec 2015 23:19:50 -0500</pubDate>
      
      <guid>http://codethejason.github.io/blog/codeignitor/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://www.codeigniter.com/&#34;&gt;Codeigniter&lt;/a&gt; is a MVC PHP application framework designed to make developing a web application easier and faster. It has a large and active &lt;a href=&#34;http://forum.codeigniter.com/&#34;&gt;community base&lt;/a&gt; with a pretty good amount of &lt;a href=&#34;http://www.codeigniter.com/user_guide/&#34;&gt;documentation&lt;/a&gt;. For me, this was my first PHP framework I used. I have always thought using frameworks like Codeigniter or Laravel is bad, but I may have to change my mindset after actually using one. The time it took me from start to end in developing this application is shorter than the time it would take to develop a &amp;lsquo;vanilla&amp;rsquo; PHP application even though this is my first time using Codeigniter. You may see my final app on my &lt;a href=&#34;http://192.111.152.115:17210/usersystem/&#34;&gt;temporary site&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;making-the-login-register-application:fc652abd1263e2709a3eda71713fadcd&#34;&gt;Making the Login/Register Application&lt;/h3&gt;

&lt;p&gt;I will go over the general gist of what I did. You can see the full code on my &lt;a href=&#34;https://github.com/codethejason/usersystem&#34;&gt;repository&lt;/a&gt;. I basically made a simple login and register system with validation. Once a user registers, he or she can login. After logging in, the user may see an array of all the registered users. He or she then may log out and can login after that. It&amp;rsquo;s a very basic application, but what is important for this task is understanding the basics of Codeigniter.&lt;/p&gt;

&lt;h4 id=&#34;first-the-basic-configuration:fc652abd1263e2709a3eda71713fadcd&#34;&gt;First the Basic Configuration&lt;/h4&gt;

&lt;p&gt;After downloading Codeigniter 3.0 from &lt;a href=&#34;https://www.codeigniter.com/download&#34;&gt;here&lt;/a&gt;, I set up the directory and apache2.conf on my server (I am  using LAMPP). I pasted this code into the &lt;Directory /var/&gt; in apache to configure mod_rewrite settings for manipulating the URL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#Source: https://gist.github.com/philipptempel/4226750
&amp;lt;IfModule mod_rewrite.c&amp;gt;
  RewriteEngine On
  # !IMPORTANT! Set your RewriteBase here and don&#39;t forget trailing and leading
  #  slashes.
  # If your page resides at
  #  http://www.example.com/mypage/test1
  # then use
  # RewriteBase /mypage/test1/
  RewriteBase /
  RewriteCond %{REQUEST_FILENAME} !-f
  RewriteCond %{REQUEST_FILENAME} !-d
  RewriteRule ^(.*)$ index.php?/$1 [L]
&amp;lt;/IfModule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I went into the &lt;em&gt;applications/config&lt;/em&gt; folder to modify the database, autoload, and config files according to my needs. I then created a new controller in &lt;em&gt;controllers/&lt;/em&gt; named main and set it as default in &lt;em&gt;config/routes.php&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;making-the-login-and-register-portion:fc652abd1263e2709a3eda71713fadcd&#34;&gt;Making the Login and Register Portion&lt;/h4&gt;

&lt;p&gt;I then proceeded to create the login method in my &lt;em&gt;Main.php&lt;/em&gt; and made a login_validation method that took advantage of the form_validation library to check that all the requirements are met (i.e. all fields required, user filled out email, etc. ). I created a view for the login form.&lt;/p&gt;

&lt;p&gt;Then, I created the register portion, which was basically the exact same as the login except for a confirm password field, a db insert method, and additional validation.&lt;/p&gt;

&lt;h4 id=&#34;finishing-the-application:fc652abd1263e2709a3eda71713fadcd&#34;&gt;Finishing the Application&lt;/h4&gt;

&lt;p&gt;Finally, I was almost done with the application after about five consecutive hours (the Model_users model was a headache to deal with). I made some final changes including printing out the results array from the db-&amp;gt;get() query.&lt;/p&gt;

&lt;p&gt;It was an interesting experience using a PHP framework for the same time. Sure it took some time to learn, but I think it was well worth as it eased my animosity towards frameworks. Everything just felt so simple &amp;ndash; no creating a validation class, no creating a configuration manager, fewer worries about security, and more. I will most definitely consider using some sort of PHP framework for my next application.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setup Hugo on Github Pages</title>
      <link>http://codethejason.github.io/blog/setupghpages/</link>
      <pubDate>Thu, 17 Dec 2015 23:12:09 -0500</pubDate>
      
      <guid>http://codethejason.github.io/blog/setupghpages/</guid>
      <description>

&lt;p&gt;At this point, you might be wondering how users can easily see your blog content without downloading the repository and doing all the steps you had to take to view your posts. This is done by publishing on &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt;, a free service offered by Github that hosts static webpages. We can create a static website by publishing all our posts. I will be using lots of content from the &lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog/&#34;&gt;Hugo site&lt;/a&gt;, so this tutorial is very similar.&lt;/p&gt;

&lt;h5 id=&#34;step-1-modify-config-toml-file:4f462177fbb182d324a56341526983da&#34;&gt;Step 1: Modify config.toml file&lt;/h5&gt;

&lt;p&gt;We must first append some lines to the configuration file to tell Hugo that we want to publish the site. Append the following lines to your existing file from the last tutorial:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;contentdir = &amp;quot;content/post&amp;quot;
layoutdir = &amp;quot;layouts&amp;quot;
publishdir = &amp;quot;public&amp;quot;
canonifyurls = true
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;step-2-setup-git-to-work:4f462177fbb182d324a56341526983da&#34;&gt;Step 2: Setup Git to Work&lt;/h5&gt;

&lt;p&gt;I borrowed this part from the official Hugo site. It is extremely comprehensive and not much more can be added. Make sure to perform these commands in order in &lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;Git Bash&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Create a new orphand branch (no commit history) named gh-pages
git checkout --orphan gh-pages

# Unstage all files
git rm --cached $(git ls-files)

# Grab one file from the master branch so we can make a commit
git checkout master README.md

# Add and commit that file
git add .
git commit -m &amp;quot;INIT: initial commit on gh-pages branch&amp;quot;

# Push to remote gh-pages branch
git push origin gh-pages

# Return to master branch
git checkout master

# Remove the public folder to make room for the gh-pages subtree
rm -rf public

# Add the gh-pages branch of the repository. It will look like a folder named public
git subtree add --prefix=public https://github.com/[github username]/blog.git gh-pages --squash

# Pull down the file we just committed. This helps avoid merge conflicts
git subtree pull --prefix=public https://github.com/[github username]/blog.git gh-pages

# Run hugo. Generated site will be placed in public directory
hugo


# Add everything
git add -A

# Commit and push to master
git commit -m &amp;quot;Updating site&amp;quot; &amp;amp;&amp;amp; git push origin master

# Push the public subtree to the gh-pages branch
git subtree push --prefix=public https://github.com/[github username]/blog.git gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be sure to be signed in to avoid any authentication problems.&lt;/p&gt;

&lt;h5 id=&#34;step-3-create-deploy-sh-file:4f462177fbb182d324a56341526983da&#34;&gt;Step 3: Create deploy.sh file&lt;/h5&gt;

&lt;p&gt;This deploy.sh file will make deploying blog posts a lot easier in the future. Since Windows does not support shell scripts, we must run the script in Git Bash. The usage of this script is &lt;code&gt;bash deploy.sh &amp;quot;&amp;lt;my commit msg&amp;gt;&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;

# Build the project.
hugo

# Add changes to git.
git add -A

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin master
git subtree push --prefix=public https://github.com/[github username]/blog.git gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it! Enjoy your new blog that&amp;rsquo;s secure and easy to use.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setup a Blog using Hugo on Windows</title>
      <link>http://codethejason.github.io/blog/welcome/</link>
      <pubDate>Wed, 16 Dec 2015 22:26:09 -0500</pubDate>
      
      <guid>http://codethejason.github.io/blog/welcome/</guid>
      <description>

&lt;p&gt;Today, I created a blog with the Hugo static website generator, an engine very similar to Jekyll. Hugo allows a user to easily setup a secure and customizable blog in a short period of time. It is open source and constantly updated to ensure the latest features and bug fixes.&lt;/p&gt;

&lt;p&gt;Setting up Hugo is a piece of cake, even on Windows. First, I recommend watch the &lt;a href=&#34;http://gohugo.io/overview/quickstart/&#34;&gt;quickstart guide&lt;/a&gt;. It is extremely informative and got me setup in less than ten minutes.&lt;/p&gt;

&lt;h5 id=&#34;step-1-install-hugo:2cc7dc244eed4480e8b46c91e911e96b&#34;&gt;Step 1: Install Hugo&lt;/h5&gt;

&lt;p&gt;To install Hugo and access it from the command prompt, first scroll down to the bottom of the &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;releases&lt;/a&gt; and download the appropriate executable. After unzipping the file, rename the file name to &lt;strong&gt;hugo.exe&lt;/strong&gt;. Navigate to your &lt;em&gt;AppData\Roaming&lt;/em&gt; (access it by typing in &lt;em&gt;%appdata%&lt;/em&gt; in the &lt;em&gt;Windows + R&lt;/em&gt; dialog) in Windows Explorer and create a new folder called &lt;strong&gt;hugo&lt;/strong&gt;, and copy the binary inside the folder. In the run dialog, type in &lt;code&gt;rundll32 sysdm.cpl,EditEnvironmentVariables&lt;/code&gt; to access the system variables. Under the user variables, edit the variable that says &lt;em&gt;PATH&lt;/em&gt; by appending a semicolon and the location of the hugo folder in appdata. After saving, you are now ready to run hugo on the command line.&lt;/p&gt;

&lt;h5 id=&#34;step-2-configure-hugo:2cc7dc244eed4480e8b46c91e911e96b&#34;&gt;Step 2: Configure Hugo&lt;/h5&gt;

&lt;p&gt;Create a folder in a location of your choice. Type in the following commands in order:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd C:\&amp;lt;Your file location&amp;gt;
mkdir hugo
cd hugo
hugo new site
hugo new firstpost.md
git clone --depth 1 --recursive https://github.com/pdevty/material-design themes/material-design
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to install other themes, feel free to &lt;a href=&#34;https://github.com/spf13/hugoThemes&#34;&gt;check them out&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Edit the &lt;em&gt;config.toml&lt;/em&gt; file to say this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseURL =&amp;quot;Your URL&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;Your Name&#39;s Blog&amp;quot;
theme = &amp;quot;material-design&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;step-3-run-hugo:2cc7dc244eed4480e8b46c91e911e96b&#34;&gt;Step 3: Run Hugo&lt;/h6&gt;

&lt;p&gt;Now, you can add any content below the plus signs to your new markdown file located at &lt;em&gt;content/posts/firstpost.md&lt;/em&gt; in your favorite text editor. The formatting is markdown, which you can read about on &lt;a href=&#34;https://help.github.com/articles/markdown-basics/&#34;&gt;Github&lt;/a&gt;. Remove the &lt;code&gt;draft = true&lt;/code&gt; statement on top of the page and run &lt;code&gt;hugo server&lt;/code&gt; to generate your content. Your content will be available on &lt;strong&gt;localhost:1313&lt;/strong&gt; in your browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://puu.sh/lYxNn/a7dbbbe8c3.jpg&#34; width=&#34;300&#34; alt=&#34;Final Result&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>