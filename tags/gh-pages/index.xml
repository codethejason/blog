<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gh Pages on Jason&#39;s Google Code-in Blog</title>
    <link>http://codethejason.github.io/blog/tags/gh-pages/</link>
    <description>Recent content in Gh Pages on Jason&#39;s Google Code-in Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 25 Dec 2015 00:25:35 -0500</lastBuildDate>
    <atom:link href="http://codethejason.github.io/blog/tags/gh-pages/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Setting Up a Webhook for Github</title>
      <link>http://codethejason.github.io/blog/webhook/</link>
      <pubDate>Fri, 25 Dec 2015 00:25:35 -0500</pubDate>
      
      <guid>http://codethejason.github.io/blog/webhook/</guid>
      <description>

&lt;p&gt;You can set up a webhook for so that each time a contributor opens or reopens a pull request on your repository/fork, a bot may comment a live version of the contributor&amp;rsquo;s site on the pull request.&lt;/p&gt;

&lt;h5 id=&#34;add-webhook:95424174b467660d9d29374c13638004&#34;&gt;Add webhook&lt;/h5&gt;

&lt;p&gt;First, you must add a webhook to your repository. To do this:&lt;/p&gt;

&lt;p&gt;1) Go to your repository settings and select &lt;em&gt;Webhooks &amp;amp; Services&lt;/em&gt;.&lt;br /&gt;
2) Click &lt;em&gt;add webhook&lt;/em&gt;. You can make up a random payload URL for now. Your secret key can be anything (be sure to record this).&lt;br /&gt;
3) Click &lt;em&gt;let me select individual events&lt;/em&gt; and only check the &lt;em&gt;pull request&lt;/em&gt; checkbox.&lt;br /&gt;
4) Create the webhook.&lt;/p&gt;

&lt;p&gt;You should see something like this afterwards (with a random link):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://puu.sh/m7QnB/804187cbaf.png&#34; alt=&#34;example&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;setting-up-your-bot:95424174b467660d9d29374c13638004&#34;&gt;Setting up your bot&lt;/h5&gt;

&lt;p&gt;You must first create a new github account to host the bot (or you can use your own account if you want it to act as the bot).  Go to your &lt;a href=&#34;https://github.com/settings/tokens&#34;&gt;settings&lt;/a&gt; to create a new personal access token. Leave it on the default permissions.&lt;/p&gt;

&lt;p&gt;1) Clone &lt;a href=&#34;https://github.com/codethejason/fossasiaprbot&#34;&gt;https://github.com/codethejason/fossasiaprbot&lt;/a&gt; to a public area on your server. Something like &lt;code&gt;http://example.com/fossasiaprbot/webhook.php&lt;/code&gt; will be your webhook URL, so please edit that in the repository settings.&lt;br /&gt;
2) On your server, install php and php5-curl.&lt;br /&gt;
3) Create a &lt;code&gt;secret.json&lt;/code&gt; in the cloned directory file like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;githubkey&amp;quot;: &amp;quot;your secret key you recorded in part 1&amp;quot;,
  &amp;quot;token&amp;quot;: &amp;quot;your secret access token&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;testing-the-webhook:95424174b467660d9d29374c13638004&#34;&gt;Testing the webhook&lt;/h5&gt;

&lt;p&gt;You can now test your webhook by creating a pull request on your fork.&lt;/p&gt;

&lt;p&gt;Sign into another account and make a file change in the &lt;em&gt;gh-pages&lt;/em&gt; branch and make a pull request. Test that the bot now posts the link to the live website.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setup Hugo on Github Pages</title>
      <link>http://codethejason.github.io/blog/setupghpages/</link>
      <pubDate>Thu, 17 Dec 2015 23:12:09 -0500</pubDate>
      
      <guid>http://codethejason.github.io/blog/setupghpages/</guid>
      <description>

&lt;p&gt;At this point, you might be wondering how users can easily see your blog content without downloading the repository and doing all the steps you had to take to view your posts. This is done by publishing on &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt;, a free service offered by Github that hosts static webpages. We can create a static website by publishing all our posts. I will be using lots of content from the &lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog/&#34;&gt;Hugo site&lt;/a&gt;, so this tutorial is very similar.&lt;/p&gt;

&lt;h5 id=&#34;step-1-modify-config-toml-file:4f462177fbb182d324a56341526983da&#34;&gt;Step 1: Modify config.toml file&lt;/h5&gt;

&lt;p&gt;We must first append some lines to the configuration file to tell Hugo that we want to publish the site. Append the following lines to your existing file from the last tutorial:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;contentdir = &amp;quot;content/post&amp;quot;
layoutdir = &amp;quot;layouts&amp;quot;
publishdir = &amp;quot;public&amp;quot;
canonifyurls = true
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;step-2-setup-git-to-work:4f462177fbb182d324a56341526983da&#34;&gt;Step 2: Setup Git to Work&lt;/h5&gt;

&lt;p&gt;I borrowed this part from the official Hugo site. It is extremely comprehensive and not much more can be added. Make sure to perform these commands in order in &lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;Git Bash&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Create a new orphand branch (no commit history) named gh-pages
git checkout --orphan gh-pages

# Unstage all files
git rm --cached $(git ls-files)

# Grab one file from the master branch so we can make a commit
git checkout master README.md

# Add and commit that file
git add .
git commit -m &amp;quot;INIT: initial commit on gh-pages branch&amp;quot;

# Push to remote gh-pages branch
git push origin gh-pages

# Return to master branch
git checkout master

# Remove the public folder to make room for the gh-pages subtree
rm -rf public

# Add the gh-pages branch of the repository. It will look like a folder named public
git subtree add --prefix=public https://github.com/[github username]/blog.git gh-pages --squash

# Pull down the file we just committed. This helps avoid merge conflicts
git subtree pull --prefix=public https://github.com/[github username]/blog.git gh-pages

# Run hugo. Generated site will be placed in public directory
hugo


# Add everything
git add -A

# Commit and push to master
git commit -m &amp;quot;Updating site&amp;quot; &amp;amp;&amp;amp; git push origin master

# Push the public subtree to the gh-pages branch
git subtree push --prefix=public https://github.com/[github username]/blog.git gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be sure to be signed in to avoid any authentication problems.&lt;/p&gt;

&lt;h5 id=&#34;step-3-create-deploy-sh-file:4f462177fbb182d324a56341526983da&#34;&gt;Step 3: Create deploy.sh file&lt;/h5&gt;

&lt;p&gt;This deploy.sh file will make deploying blog posts a lot easier in the future. Since Windows does not support shell scripts, we must run the script in Git Bash. The usage of this script is &lt;code&gt;bash deploy.sh &amp;quot;&amp;lt;my commit msg&amp;gt;&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;

# Build the project.
hugo

# Add changes to git.
git add -A

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin master
git subtree push --prefix=public https://github.com/[github username]/blog.git gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it! Enjoy your new blog that&amp;rsquo;s secure and easy to use.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>